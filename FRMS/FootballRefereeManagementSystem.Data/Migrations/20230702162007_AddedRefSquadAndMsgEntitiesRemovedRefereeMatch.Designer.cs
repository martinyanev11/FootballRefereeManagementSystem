// <auto-generated />
using System;
using FootballRefereeManagementSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FootballRefereeManagementSystem.Data.Migrations
{
    [DbContext(typeof(FootballRefereeManagementSystemDbContext))]
    [Migration("20230702162007_AddedRefSquadAndMsgEntitiesRemovedRefereeMatch")]
    partial class AddedRefSquadAndMsgEntitiesRemovedRefereeMatch
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("RefereeId")
                        .HasColumnType("int")
                        .HasComment("The navigation to the referee for this user");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasComment("Customization of Default Identity User");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Division name");

                    b.HasKey("Id");

                    b.ToTable("Divisions");

                    b.HasComment("Division represents the level of the teams playing in it");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasComment("Age of the person represented by this entity");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("First name of the person represented by this entity");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Last name of the person represented by this entity");

                    b.HasKey("Id");

                    b.ToTable("Managers");

                    b.HasComment("Manager is the one who is in charge of team");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("int")
                        .HasComment("Information about guest team");

                    b.Property<int>("DivisionId")
                        .HasColumnType("int")
                        .HasComment("In what division is the match played");

                    b.Property<string>("FinalResult")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("The final result of the match");

                    b.Property<DateTime>("FixtureTime")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time the match is played");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int")
                        .HasComment("Information about host team");

                    b.Property<Guid>("RefereeSquadId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The referee squad appointed to officiate the match");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int")
                        .HasComment("Season during which match takes place");

                    b.Property<int>("TownId")
                        .HasColumnType("int")
                        .HasComment("Town in which the match is played");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.HasIndex("TownId");

                    b.HasIndex("AwayTeamId", "SeasonId");

                    b.HasIndex("HomeTeamId", "SeasonId");

                    b.ToTable("Matches");

                    b.HasComment("Information about a football match");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Name of the message creator");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasComment("The content of the message");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Time and date of creation");

                    b.Property<Guid>("RefereeSquadId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The match center where comment was made");

                    b.HasKey("Id");

                    b.HasIndex("RefereeSquadId");

                    b.ToTable("Messages");

                    b.HasComment("Messages the referee write in match center");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasComment("Age of the player");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("First name of the player");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Last name of the player");

                    b.Property<string>("Position")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("In what position the player plays in the team");

                    b.HasKey("Id");

                    b.ToTable("Players");

                    b.HasComment("Player playing in specific team during specific season");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.PlayerTeamSeason", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasComment("Team playing in specific season");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int")
                        .HasComment("The player in the team");

                    b.HasKey("TeamId", "SeasonId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerTeamSeason");

                    b.HasComment("Player playing in a team during a season");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Referee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasComment("Age of the person represented by this entity");

                    b.Property<DateTime>("CareerStart")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time of registration within the organization");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Phone number of the person represented by this entity");

                    b.Property<int>("CurrentlyAppointedMatchesCount")
                        .HasColumnType("int")
                        .HasComment("The number of matches appointed to this entity on current round");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("First name of the person represented by this entity");

                    b.Property<string>("ImageUrl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("~/Images/Referees/referee-default-avatar.png")
                        .HasComment("Picture of the person represented by this entity");

                    b.Property<bool>("IsAvaliable")
                        .HasColumnType("bit")
                        .HasComment("Gives information if person is free to officiate matches for current round");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Last name of the person represented by this entity");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasComment("Current role of the person represented by this entity within the organization");

                    b.Property<int>("TotalMatchesOfficiated")
                        .HasColumnType("int")
                        .HasComment("Number of matches officiated");

                    b.Property<int>("TownId")
                        .HasColumnType("int")
                        .HasComment("Current town which the person represented by this entity resides");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The registered user related to this entity");

                    b.HasKey("Id");

                    b.HasIndex("TownId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Referees");

                    b.HasComment("The main entity of the application");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.RefereeDivision", b =>
                {
                    b.Property<int>("RefereeId")
                        .HasColumnType("int")
                        .HasComment("Referee in specific division");

                    b.Property<int>("DivisionId")
                        .HasColumnType("int")
                        .HasComment("Division in which referee is allowed to offciate");

                    b.Property<int>("DivisionMatchesOfficiated")
                        .HasColumnType("int")
                        .HasComment("The count of matches referee officiated in this division");

                    b.HasKey("RefereeId", "DivisionId");

                    b.HasIndex("DivisionId");

                    b.ToTable("RefereesDivisions");

                    b.HasComment("Mapping table for Referee and Division");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.RefereeSquad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key");

                    b.Property<int>("DelegateId")
                        .HasColumnType("int")
                        .HasComment("Delegate who will supervise the officials");

                    b.Property<int>("FirstAssistantRefereeId")
                        .HasColumnType("int")
                        .HasComment("First assistant of the match");

                    b.Property<int>("MainRefereeId")
                        .HasColumnType("int")
                        .HasComment("Main referee of the squad");

                    b.Property<int>("MatchId")
                        .HasColumnType("int")
                        .HasComment("Match assigned to the squad");

                    b.Property<int>("SecondAssistantRefereeId")
                        .HasColumnType("int")
                        .HasComment("Second assistant of the match");

                    b.HasKey("Id");

                    b.HasIndex("DelegateId");

                    b.HasIndex("FirstAssistantRefereeId");

                    b.HasIndex("MainRefereeId");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.HasIndex("SecondAssistantRefereeId");

                    b.ToTable("RefereesSquads");

                    b.HasComment("Every referee squad consists of 1 main ref, 2 assitants and a delegate");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("Short name for the season (e.g. 2004/05, 2011/12, 2022/23)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2")
                        .HasComment("End of the season");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2")
                        .HasComment("Start of the season");

                    b.HasKey("Id");

                    b.ToTable("Seasons");

                    b.HasComment("Season is the timespan in which all matches between teams are played");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasComment("Abbreviation of the team");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the team");

                    b.Property<int>("TownId")
                        .HasColumnType("int")
                        .HasComment("In which town the team is located");

                    b.HasKey("Id");

                    b.HasIndex("TownId");

                    b.ToTable("Teams");

                    b.HasComment("Team that plays matches in specific division during specific season");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.TeamSeason", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasComment("Team that participates specific season");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int")
                        .HasComment("The specific season");

                    b.Property<int>("DivisionId")
                        .HasColumnType("int")
                        .HasComment("In which division the team plays");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int")
                        .HasComment("The manager of the team for specific season");

                    b.Property<int>("Placement")
                        .HasColumnType("int")
                        .HasComment("Placement in the division during the season");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasComment("Points earned during season");

                    b.Property<int>("ShirtColor")
                        .HasColumnType("int")
                        .HasComment("Color of the player's shirts");

                    b.HasKey("TeamId", "SeasonId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("SeasonId");

                    b.ToTable("TeamsSeasons");

                    b.HasComment("Mapping table for team and season");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Distance")
                        .HasColumnType("float")
                        .HasComment("Distance to town from given location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("nvarchar(26)")
                        .HasComment("Name of the town");

                    b.Property<double>("TravelCost")
                        .HasColumnType("float")
                        .HasComment("The cost of travel which is calculated from distance and gas price");

                    b.Property<int>("TravelTime")
                        .HasColumnType("int")
                        .HasComment("The time it takes to go to the town from given location");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int")
                        .HasComment("Zone in which town is located");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId");

                    b.ToTable("Towns");

                    b.HasComment("Where teams and referees are located and matches are played");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Name of the zone");

                    b.HasKey("Id");

                    b.ToTable("Zones");

                    b.HasComment("Zone that is part of region in the country");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Match", b =>
                {
                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Division", "Division")
                        .WithMany("Matches")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Town", "Town")
                        .WithMany("Matches")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.TeamSeason", "AwayTeam")
                        .WithMany("AwayGames")
                        .HasForeignKey("AwayTeamId", "SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.TeamSeason", "HomeTeam")
                        .WithMany("HomeGames")
                        .HasForeignKey("HomeTeamId", "SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("Division");

                    b.Navigation("HomeTeam");

                    b.Navigation("Town");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Message", b =>
                {
                    b.HasOne("FootballRefereeManagementSystem.Data.Models.RefereeSquad", "RefereeSquad")
                        .WithMany("Messages")
                        .HasForeignKey("RefereeSquadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RefereeSquad");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.PlayerTeamSeason", b =>
                {
                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Player", "Player")
                        .WithMany("PlayerTeamsSeasons")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.TeamSeason", "TeamSeason")
                        .WithMany("TeamSeasonPlayers")
                        .HasForeignKey("TeamId", "SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("TeamSeason");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Referee", b =>
                {
                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Town", "Town")
                        .WithMany("Referees")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.ApplicationUser", "User")
                        .WithOne("Referee")
                        .HasForeignKey("FootballRefereeManagementSystem.Data.Models.Referee", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Town");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.RefereeDivision", b =>
                {
                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Division", "Division")
                        .WithMany("DivisionReferees")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Referee", "Referee")
                        .WithMany("RefereeDivisions")
                        .HasForeignKey("RefereeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Division");

                    b.Navigation("Referee");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.RefereeSquad", b =>
                {
                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Referee", "Delegate")
                        .WithMany("DelegateRefereeSquads")
                        .HasForeignKey("DelegateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Referee", "FirstAssistantReferee")
                        .WithMany("FirstAssistantRefereeSquads")
                        .HasForeignKey("FirstAssistantRefereeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Referee", "MainReferee")
                        .WithMany("MainRefereeSquads")
                        .HasForeignKey("MainRefereeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Match", "Match")
                        .WithOne("RefereeSquad")
                        .HasForeignKey("FootballRefereeManagementSystem.Data.Models.RefereeSquad", "MatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Referee", "SecondAssistantReferee")
                        .WithMany("SecondAssistantRefereeSquads")
                        .HasForeignKey("SecondAssistantRefereeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Delegate");

                    b.Navigation("FirstAssistantReferee");

                    b.Navigation("MainReferee");

                    b.Navigation("Match");

                    b.Navigation("SecondAssistantReferee");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Team", b =>
                {
                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Town", "Town")
                        .WithMany("Teams")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Town");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.TeamSeason", b =>
                {
                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Division", "Division")
                        .WithMany("TeamsSeasons")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Manager", "Manager")
                        .WithMany("TeamsSeasons")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Season", "Season")
                        .WithMany("SeasonTeams")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Team", "Team")
                        .WithMany("TeamSeasons")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Division");

                    b.Navigation("Manager");

                    b.Navigation("Season");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Town", b =>
                {
                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Zone", "Zone")
                        .WithMany("Towns")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("FootballRefereeManagementSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("FootballRefereeManagementSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("FootballRefereeManagementSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Referee")
                        .IsRequired();
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Division", b =>
                {
                    b.Navigation("DivisionReferees");

                    b.Navigation("Matches");

                    b.Navigation("TeamsSeasons");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Manager", b =>
                {
                    b.Navigation("TeamsSeasons");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Match", b =>
                {
                    b.Navigation("RefereeSquad")
                        .IsRequired();
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Player", b =>
                {
                    b.Navigation("PlayerTeamsSeasons");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Referee", b =>
                {
                    b.Navigation("DelegateRefereeSquads");

                    b.Navigation("FirstAssistantRefereeSquads");

                    b.Navigation("MainRefereeSquads");

                    b.Navigation("RefereeDivisions");

                    b.Navigation("SecondAssistantRefereeSquads");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.RefereeSquad", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Season", b =>
                {
                    b.Navigation("SeasonTeams");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Team", b =>
                {
                    b.Navigation("TeamSeasons");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.TeamSeason", b =>
                {
                    b.Navigation("AwayGames");

                    b.Navigation("HomeGames");

                    b.Navigation("TeamSeasonPlayers");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Town", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Referees");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Zone", b =>
                {
                    b.Navigation("Towns");
                });
#pragma warning restore 612, 618
        }
    }
}
