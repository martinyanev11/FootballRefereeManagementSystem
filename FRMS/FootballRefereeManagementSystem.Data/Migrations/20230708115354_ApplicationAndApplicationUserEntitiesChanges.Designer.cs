// <auto-generated />
using System;
using FootballRefereeManagementSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FootballRefereeManagementSystem.Data.Migrations
{
    [DbContext(typeof(FootballRefereeManagementSystemDbContext))]
    [Migration("20230708115354_ApplicationAndApplicationUserEntitiesChanges")]
    partial class ApplicationAndApplicationUserEntitiesChanges
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasComment("Age of applicant");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Contact number of applicant");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Email of applicant");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("First name of applicant");

                    b.Property<bool>("HasCar")
                        .HasColumnType("bit")
                        .HasComment("Does applicant have car");

                    b.Property<bool>("HasDriverLicense")
                        .HasColumnType("bit")
                        .HasComment("Does applicant have drivers license");

                    b.Property<bool>("KnowsFootballRules")
                        .HasColumnType("bit")
                        .HasComment("Has applicant read football rules");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Last name of applicant");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("User profile who applied");

                    b.Property<int>("Weight")
                        .HasColumnType("int")
                        .HasComment("Weight of applicant");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Applications");

                    b.HasComment("Application request to become a referee");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("int")
                        .HasComment("Application for becoming a referee");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("RefereeId")
                        .HasColumnType("int")
                        .HasComment("The navigation to the referee for this user");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasComment("Customization of Default Identity User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea01fe26-36c8-4daa-b1c8-8b9209e82478"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3d16b9e2-8065-434a-884f-6d37eb784342",
                            Email = "referee@bfs.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "REFEREE@BFS.COM",
                            NormalizedUserName = "REFEREE@BFS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECcDNtE2Ka/KyTOv3XfxMyJsDeInEQTBZa75dcl7RjPjnGu1dkzXC0iSJfMUJc/jKA==",
                            PhoneNumberConfirmed = false,
                            RefereeId = 1,
                            SecurityStamp = "db57a249-0967-4cf8-ab10-b0268f458ebe",
                            TwoFactorEnabled = false,
                            UserName = "referee@bfs.com"
                        },
                        new
                        {
                            Id = new Guid("1e48bbc8-cbf0-494c-89e0-6bcccc36cc6a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f09eff3-d21c-42d1-aa86-425388a3eed9",
                            Email = "assitant_referee1@bfs.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ASSITANT_REFEREE1@BFS.COM",
                            NormalizedUserName = "ASSITANT_REFEREE1@BFS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ5qYU0C5gCJiMWrffbDcit0f8DxZe6UU0E9cOP44xf6ZHJ/R8bJo0I+AIScafuF+g==",
                            PhoneNumberConfirmed = false,
                            RefereeId = 2,
                            SecurityStamp = "4997d948-a53a-4117-9fda-df827c3441fd",
                            TwoFactorEnabled = false,
                            UserName = "assitant_referee1@bfs.com"
                        },
                        new
                        {
                            Id = new Guid("065a8654-fc52-43b4-8d3d-7e90a87e2bd9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "748d49af-dce0-438b-a627-06f6d40b6c56",
                            Email = "assitant_referee2@bfs.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ASSITANT_REFEREE2@BFS.COM",
                            NormalizedUserName = "ASSITANT_REFEREE2@BFS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOM4NXyxuP6yAwM6WUGLn4duuxer1T1K/sMCOT8eTsPCyMuLkeY5mDhzRpq5vMVByg==",
                            PhoneNumberConfirmed = false,
                            RefereeId = 3,
                            SecurityStamp = "3b562f65-1fd5-472f-80fd-7cdf6d657447",
                            TwoFactorEnabled = false,
                            UserName = "assitant_referee2@bfs.com"
                        },
                        new
                        {
                            Id = new Guid("35e56d1c-a7c2-445d-9eb5-0cdaecb0ebb1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "02b71297-7a70-42ea-8121-dfd05fbeef75",
                            Email = "delegate@bfs.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DELEGATE@BFS.COM",
                            NormalizedUserName = "DELEGATE@BFS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFNekwTndfqVLXKeeQ6Iliig4J3Mem/J6wmHG/SeWJDZcppa0avJy37CL6FZWGfAYw==",
                            PhoneNumberConfirmed = false,
                            RefereeId = 4,
                            SecurityStamp = "44937210-25d0-4cf8-803c-45db2c4c07c7",
                            TwoFactorEnabled = false,
                            UserName = "delegate@bfs.com"
                        },
                        new
                        {
                            Id = new Guid("d9f18631-5bdb-4b41-86f4-8d6dbe71efb6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "06a30d1b-b584-4f64-a18d-74da896007f7",
                            Email = "admin@bfs.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@BFS.COM",
                            NormalizedUserName = "ADMIN@BFS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDlrpeh8i/or8FxEnH2AoUYoAXLhxFXh/LHD3IFVHeFP+qgaZp4KZ05o0BDZtTjpjA==",
                            PhoneNumberConfirmed = false,
                            RefereeId = 5,
                            SecurityStamp = "c1a8f37e-fc39-447f-a876-0247ba0bd5df",
                            TwoFactorEnabled = false,
                            UserName = "admin@bfs.com"
                        });
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Author of the article");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)")
                        .HasComment("Content of the article");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Image related to this article");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Title of the article");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Articles");

                    b.HasComment("Any news or announcements on the platform");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = new Guid("d9f18631-5bdb-4b41-86f4-8d6dbe71efb6"),
                            Content = "На 08.06.2023г в ОС на БФС-Плевен се проведе заседание на СТК при ОС на БФС Плевен и бяха взети следните решения:\r\n\r\nНа 04.06.2023г. в среща от 18 кръг на първенството на „Б”ОФГ-изток между отборите на ФК\"Обнова-2022\" – Обнова и ФК\"Чавдар-1920\" – Бръшляница, проведена в с.Обнова от 18ч. В 80мин. на срещата при резултат 1:0 в полза на ФК\"Обнова-2022\" е отсъден 11-метров наказателен удар в полза на ФК\"Обнова-2022\".Следва бурен протест от състезателите на ФК\"Чавдар-1920\" – Бръшляница.Нанесени са удари на гл.съдия в главата и тялото от състезатели на ФК\"Чавдар-1920\" – Бръшляница.поради създалата се обстановка при която е застрашено здравето и сигурността на длъжностните лица и няма условия футболната среща да продължи, същата е прекратена.\r\n\r\nНа основание чл.24 ал.9 от наредбата на БФС,се присъжда служебна  загуба при резултат 4:0 в полза на ФК\"Обнова-2022\".\r\n\r\nНеизрядната страна няма право да обжалва наказанието по тази алинея.",
                            CreatedOn = new DateTime(2023, 7, 8, 11, 53, 53, 960, DateTimeKind.Utc).AddTicks(3265),
                            Title = "Заседание на СТК при ОС на БФС Плевен"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = new Guid("d9f18631-5bdb-4b41-86f4-8d6dbe71efb6"),
                            Content = "В среща от 17-ти кръг от първенството на „Б” ОФГ-запад между отборите на ФК\"Мизия-1924\" – Кнежа и ФК”Спартак-1924”-Койнаре проведена на 28.05. от 18ч. в гр.Кнежа и бяха взети следните решения:За навлизане на публиката на гостите от ФК”Спартак-1924”-Койнаре на терена по  време на срещата :Наказва ФК”Спартак-1924”-Койнаре с предупреждение, лишаване от домакинство и глоба в размер на 150/сто и петдесет/лева  по чл.37 ал.1 буква „в” от ДП.",
                            CreatedOn = new DateTime(2023, 7, 8, 11, 53, 53, 960, DateTimeKind.Utc).AddTicks(3273),
                            Title = "Решение на ДК- ОС на БФС Плевен"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = new Guid("d9f18631-5bdb-4b41-86f4-8d6dbe71efb6"),
                            Content = "В среща от 15-ти кръг от първенството на „Б” ОФГ-изток между отборите на ФК\"Славия\"-Новачене и ФК\"Обнова-2022\" - Обнова проведена на14.05.от 18ч. в с.Новачене и бяха взети следните решения:Наказва Явор Руменов Димитров  от отбора на ФК\"Славия\"-Новачене за получен червен картон със ССП за 1/една/ среща по чл.22 ал.1 т.1буква „з”от ДП.Наказва Галин Пламенов Георгиев от отбора на ФК\"Обнова-2022\" - Обнова за получен червен картон със ССП за 1/една/ среща по чл.22 ал.1 т.1буква „в”от ДП.",
                            CreatedOn = new DateTime(2023, 7, 8, 11, 53, 53, 960, DateTimeKind.Utc).AddTicks(3275),
                            Title = " Решение на ДК- ОС на БФС Плевен"
                        });
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Division name");

                    b.HasKey("Id");

                    b.ToTable("Divisions");

                    b.HasComment("Division represents the level of the teams playing in it");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Първа професионална футболна лига"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Втора професионална футболна лига"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Трета аматьорска футболна лига"
                        },
                        new
                        {
                            Id = 4,
                            Name = "„А“ областнa футболнa групa"
                        },
                        new
                        {
                            Id = 5,
                            Name = "„Б“ областнa футболнa групa"
                        });
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasComment("Age of the person represented by this entity");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("First name of the person represented by this entity");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Last name of the person represented by this entity");

                    b.HasKey("Id");

                    b.ToTable("Managers");

                    b.HasComment("Manager is the one who is in charge of team");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 33,
                            FirstName = "Димо",
                            LastName = "Кристиянов"
                        },
                        new
                        {
                            Id = 2,
                            Age = 44,
                            FirstName = "Любомир",
                            LastName = "Робертов"
                        },
                        new
                        {
                            Id = 3,
                            Age = 59,
                            FirstName = "Димо",
                            LastName = "Владимиров"
                        },
                        new
                        {
                            Id = 4,
                            Age = 55,
                            FirstName = "Николай",
                            LastName = "Георгиев"
                        });
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("int")
                        .HasComment("Information about guest team");

                    b.Property<int>("DivisionId")
                        .HasColumnType("int")
                        .HasComment("In what division is the match played");

                    b.Property<string>("FinalResult")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("The final result of the match");

                    b.Property<DateTime>("FixtureTime")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time the match is played");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int")
                        .HasComment("Information about host team");

                    b.Property<Guid?>("RefereeSquadId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The referee squad appointed to officiate the match");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int")
                        .HasComment("Season during which match takes place");

                    b.Property<int>("TownId")
                        .HasColumnType("int")
                        .HasComment("Town in which the match is played");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.HasIndex("TownId");

                    b.HasIndex("AwayTeamId", "SeasonId");

                    b.HasIndex("HomeTeamId", "SeasonId");

                    b.ToTable("Matches");

                    b.HasComment("Information about a football match");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AwayTeamId = 2,
                            DivisionId = 4,
                            FixtureTime = new DateTime(2022, 9, 17, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 1,
                            RefereeSquadId = new Guid("5f7a5bad-da9c-4fd9-871a-483492e9bdaa"),
                            SeasonId = 1,
                            TownId = 2
                        },
                        new
                        {
                            Id = 2,
                            AwayTeamId = 3,
                            DivisionId = 4,
                            FixtureTime = new DateTime(2022, 9, 24, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 1,
                            SeasonId = 1,
                            TownId = 2
                        },
                        new
                        {
                            Id = 3,
                            AwayTeamId = 4,
                            DivisionId = 4,
                            FixtureTime = new DateTime(2022, 10, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 1,
                            SeasonId = 1,
                            TownId = 2
                        },
                        new
                        {
                            Id = 4,
                            AwayTeamId = 1,
                            DivisionId = 4,
                            FixtureTime = new DateTime(2022, 10, 8, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 2,
                            SeasonId = 1,
                            TownId = 3
                        },
                        new
                        {
                            Id = 5,
                            AwayTeamId = 3,
                            DivisionId = 4,
                            FixtureTime = new DateTime(2022, 9, 25, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 2,
                            SeasonId = 1,
                            TownId = 3
                        },
                        new
                        {
                            Id = 6,
                            AwayTeamId = 4,
                            DivisionId = 4,
                            FixtureTime = new DateTime(2022, 9, 18, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 2,
                            SeasonId = 1,
                            TownId = 3
                        },
                        new
                        {
                            Id = 7,
                            AwayTeamId = 1,
                            DivisionId = 4,
                            FixtureTime = new DateTime(2022, 10, 2, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 3,
                            SeasonId = 1,
                            TownId = 4
                        },
                        new
                        {
                            Id = 8,
                            AwayTeamId = 2,
                            DivisionId = 4,
                            FixtureTime = new DateTime(2022, 10, 9, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 3,
                            SeasonId = 1,
                            TownId = 4
                        },
                        new
                        {
                            Id = 9,
                            AwayTeamId = 4,
                            DivisionId = 4,
                            FixtureTime = new DateTime(2022, 9, 17, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 3,
                            SeasonId = 1,
                            TownId = 4
                        },
                        new
                        {
                            Id = 10,
                            AwayTeamId = 1,
                            DivisionId = 4,
                            FixtureTime = new DateTime(2022, 9, 25, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 4,
                            SeasonId = 1,
                            TownId = 5
                        },
                        new
                        {
                            Id = 11,
                            AwayTeamId = 2,
                            DivisionId = 4,
                            FixtureTime = new DateTime(2022, 9, 24, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 4,
                            SeasonId = 1,
                            TownId = 5
                        },
                        new
                        {
                            Id = 12,
                            AwayTeamId = 3,
                            DivisionId = 4,
                            FixtureTime = new DateTime(2022, 10, 8, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 4,
                            SeasonId = 1,
                            TownId = 5
                        });
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasComment("Referee who created the message");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasComment("The content of the message");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Time and date of creation");

                    b.Property<Guid>("RefereeSquadId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The match center where comment was made");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("RefereeSquadId");

                    b.ToTable("Messages");

                    b.HasComment("Messages the referee write in match center");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasComment("Age of the player");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("First name of the player");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Last name of the player");

                    b.Property<string>("Position")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("In what position the player plays in the team");

                    b.HasKey("Id");

                    b.ToTable("Players");

                    b.HasComment("Player playing in specific team during specific season");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 14,
                            FirstName = "Роберт",
                            LastName = "Симеонов"
                        },
                        new
                        {
                            Id = 2,
                            Age = 31,
                            FirstName = "Стефанос",
                            LastName = "Ивов"
                        },
                        new
                        {
                            Id = 3,
                            Age = 39,
                            FirstName = "Илия",
                            LastName = "Димитров"
                        },
                        new
                        {
                            Id = 4,
                            Age = 36,
                            FirstName = "Емил",
                            LastName = "Михаелов"
                        },
                        new
                        {
                            Id = 5,
                            Age = 18,
                            FirstName = "Георги",
                            LastName = "Георгиев"
                        },
                        new
                        {
                            Id = 6,
                            Age = 38,
                            FirstName = "Роберт",
                            LastName = "Даниелов"
                        },
                        new
                        {
                            Id = 7,
                            Age = 26,
                            FirstName = "Иван",
                            LastName = "Стефанов"
                        },
                        new
                        {
                            Id = 8,
                            Age = 24,
                            FirstName = "Андрей",
                            LastName = "Мартинов"
                        },
                        new
                        {
                            Id = 9,
                            Age = 33,
                            FirstName = "Димо",
                            LastName = "Маринов"
                        },
                        new
                        {
                            Id = 10,
                            Age = 23,
                            FirstName = "Любен",
                            LastName = "Георгиев"
                        },
                        new
                        {
                            Id = 11,
                            Age = 34,
                            FirstName = "Симеон",
                            LastName = "Димитров"
                        },
                        new
                        {
                            Id = 12,
                            Age = 14,
                            FirstName = "Антонио",
                            LastName = "Маринов"
                        },
                        new
                        {
                            Id = 13,
                            Age = 32,
                            FirstName = "Иван",
                            LastName = "Янков"
                        },
                        new
                        {
                            Id = 14,
                            Age = 24,
                            FirstName = "Ангел",
                            LastName = "Янков"
                        },
                        new
                        {
                            Id = 15,
                            Age = 37,
                            FirstName = "Стефанос",
                            LastName = "Емилов"
                        },
                        new
                        {
                            Id = 16,
                            Age = 14,
                            FirstName = "Калоян",
                            LastName = "Янков"
                        },
                        new
                        {
                            Id = 17,
                            Age = 17,
                            FirstName = "Георгиос",
                            LastName = "Ивов"
                        },
                        new
                        {
                            Id = 18,
                            Age = 34,
                            FirstName = "Ивайло",
                            LastName = "Михайлов"
                        },
                        new
                        {
                            Id = 19,
                            Age = 39,
                            FirstName = "Христо",
                            LastName = "Радославов"
                        },
                        new
                        {
                            Id = 20,
                            Age = 37,
                            FirstName = "Илия",
                            LastName = "Стефанов"
                        },
                        new
                        {
                            Id = 21,
                            Age = 30,
                            FirstName = "Радослав",
                            LastName = "Стефаносов"
                        },
                        new
                        {
                            Id = 22,
                            Age = 37,
                            FirstName = "Любомир",
                            LastName = "Михаелов"
                        },
                        new
                        {
                            Id = 23,
                            Age = 22,
                            FirstName = "Антонио",
                            LastName = "Руменов"
                        },
                        new
                        {
                            Id = 24,
                            Age = 36,
                            FirstName = "Алексей",
                            LastName = "Николов"
                        },
                        new
                        {
                            Id = 25,
                            Age = 23,
                            FirstName = "Димитър",
                            LastName = "Мартинов"
                        },
                        new
                        {
                            Id = 26,
                            Age = 29,
                            FirstName = "Илия",
                            LastName = "Радославов"
                        },
                        new
                        {
                            Id = 27,
                            Age = 26,
                            FirstName = "Симеон",
                            LastName = "Антониев"
                        },
                        new
                        {
                            Id = 28,
                            Age = 38,
                            FirstName = "Мартин",
                            LastName = "Викторов"
                        },
                        new
                        {
                            Id = 29,
                            Age = 16,
                            FirstName = "Николай",
                            LastName = "Любенов"
                        },
                        new
                        {
                            Id = 30,
                            Age = 20,
                            FirstName = "Антонио",
                            LastName = "Андреев"
                        },
                        new
                        {
                            Id = 31,
                            Age = 36,
                            FirstName = "Петър",
                            LastName = "Ивов"
                        },
                        new
                        {
                            Id = 32,
                            Age = 14,
                            FirstName = "Янко",
                            LastName = "Георгиев"
                        },
                        new
                        {
                            Id = 33,
                            Age = 38,
                            FirstName = "Михаил",
                            LastName = "Георгиев"
                        },
                        new
                        {
                            Id = 34,
                            Age = 26,
                            FirstName = "Роберт",
                            LastName = "Руменов"
                        },
                        new
                        {
                            Id = 35,
                            Age = 17,
                            FirstName = "Мартин",
                            LastName = "Михаелов"
                        },
                        new
                        {
                            Id = 36,
                            Age = 16,
                            FirstName = "Николай",
                            LastName = "Радославов"
                        },
                        new
                        {
                            Id = 37,
                            Age = 17,
                            FirstName = "Павел",
                            LastName = "Илиев"
                        },
                        new
                        {
                            Id = 38,
                            Age = 34,
                            FirstName = "Любен",
                            LastName = "Христов"
                        },
                        new
                        {
                            Id = 39,
                            Age = 35,
                            FirstName = "Антон",
                            LastName = "Христов"
                        },
                        new
                        {
                            Id = 40,
                            Age = 14,
                            FirstName = "Димитър",
                            LastName = "Петров"
                        },
                        new
                        {
                            Id = 41,
                            Age = 29,
                            FirstName = "Петър",
                            LastName = "Димитров"
                        },
                        new
                        {
                            Id = 42,
                            Age = 35,
                            FirstName = "Георги",
                            LastName = "Велинов"
                        },
                        new
                        {
                            Id = 43,
                            Age = 22,
                            FirstName = "Даниел",
                            LastName = "Александров"
                        },
                        new
                        {
                            Id = 44,
                            Age = 17,
                            FirstName = "Тодор",
                            LastName = "Илиев"
                        });
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.PlayerTeamSeason", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasComment("Team playing in specific season");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int")
                        .HasComment("The player in the team");

                    b.HasKey("TeamId", "SeasonId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerTeamSeason");

                    b.HasComment("Player playing in a team during a season");

                    b.HasData(
                        new
                        {
                            TeamId = 1,
                            SeasonId = 1,
                            PlayerId = 1
                        },
                        new
                        {
                            TeamId = 1,
                            SeasonId = 1,
                            PlayerId = 2
                        },
                        new
                        {
                            TeamId = 1,
                            SeasonId = 1,
                            PlayerId = 3
                        },
                        new
                        {
                            TeamId = 1,
                            SeasonId = 1,
                            PlayerId = 4
                        },
                        new
                        {
                            TeamId = 1,
                            SeasonId = 1,
                            PlayerId = 5
                        },
                        new
                        {
                            TeamId = 1,
                            SeasonId = 1,
                            PlayerId = 6
                        },
                        new
                        {
                            TeamId = 1,
                            SeasonId = 1,
                            PlayerId = 7
                        },
                        new
                        {
                            TeamId = 1,
                            SeasonId = 1,
                            PlayerId = 8
                        },
                        new
                        {
                            TeamId = 1,
                            SeasonId = 1,
                            PlayerId = 9
                        },
                        new
                        {
                            TeamId = 1,
                            SeasonId = 1,
                            PlayerId = 10
                        },
                        new
                        {
                            TeamId = 1,
                            SeasonId = 1,
                            PlayerId = 11
                        },
                        new
                        {
                            TeamId = 2,
                            SeasonId = 1,
                            PlayerId = 12
                        },
                        new
                        {
                            TeamId = 2,
                            SeasonId = 1,
                            PlayerId = 13
                        },
                        new
                        {
                            TeamId = 2,
                            SeasonId = 1,
                            PlayerId = 14
                        },
                        new
                        {
                            TeamId = 2,
                            SeasonId = 1,
                            PlayerId = 15
                        },
                        new
                        {
                            TeamId = 2,
                            SeasonId = 1,
                            PlayerId = 16
                        },
                        new
                        {
                            TeamId = 2,
                            SeasonId = 1,
                            PlayerId = 17
                        },
                        new
                        {
                            TeamId = 2,
                            SeasonId = 1,
                            PlayerId = 18
                        },
                        new
                        {
                            TeamId = 2,
                            SeasonId = 1,
                            PlayerId = 19
                        },
                        new
                        {
                            TeamId = 2,
                            SeasonId = 1,
                            PlayerId = 20
                        },
                        new
                        {
                            TeamId = 2,
                            SeasonId = 1,
                            PlayerId = 21
                        },
                        new
                        {
                            TeamId = 2,
                            SeasonId = 1,
                            PlayerId = 22
                        },
                        new
                        {
                            TeamId = 3,
                            SeasonId = 1,
                            PlayerId = 23
                        },
                        new
                        {
                            TeamId = 3,
                            SeasonId = 1,
                            PlayerId = 24
                        },
                        new
                        {
                            TeamId = 3,
                            SeasonId = 1,
                            PlayerId = 25
                        },
                        new
                        {
                            TeamId = 3,
                            SeasonId = 1,
                            PlayerId = 26
                        },
                        new
                        {
                            TeamId = 3,
                            SeasonId = 1,
                            PlayerId = 27
                        },
                        new
                        {
                            TeamId = 3,
                            SeasonId = 1,
                            PlayerId = 28
                        },
                        new
                        {
                            TeamId = 3,
                            SeasonId = 1,
                            PlayerId = 29
                        },
                        new
                        {
                            TeamId = 3,
                            SeasonId = 1,
                            PlayerId = 30
                        },
                        new
                        {
                            TeamId = 3,
                            SeasonId = 1,
                            PlayerId = 31
                        },
                        new
                        {
                            TeamId = 3,
                            SeasonId = 1,
                            PlayerId = 32
                        },
                        new
                        {
                            TeamId = 3,
                            SeasonId = 1,
                            PlayerId = 33
                        },
                        new
                        {
                            TeamId = 4,
                            SeasonId = 1,
                            PlayerId = 34
                        },
                        new
                        {
                            TeamId = 4,
                            SeasonId = 1,
                            PlayerId = 35
                        },
                        new
                        {
                            TeamId = 4,
                            SeasonId = 1,
                            PlayerId = 36
                        },
                        new
                        {
                            TeamId = 4,
                            SeasonId = 1,
                            PlayerId = 37
                        },
                        new
                        {
                            TeamId = 4,
                            SeasonId = 1,
                            PlayerId = 38
                        },
                        new
                        {
                            TeamId = 4,
                            SeasonId = 1,
                            PlayerId = 39
                        },
                        new
                        {
                            TeamId = 4,
                            SeasonId = 1,
                            PlayerId = 40
                        },
                        new
                        {
                            TeamId = 4,
                            SeasonId = 1,
                            PlayerId = 41
                        },
                        new
                        {
                            TeamId = 4,
                            SeasonId = 1,
                            PlayerId = 42
                        },
                        new
                        {
                            TeamId = 4,
                            SeasonId = 1,
                            PlayerId = 43
                        },
                        new
                        {
                            TeamId = 4,
                            SeasonId = 1,
                            PlayerId = 44
                        });
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Referee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasComment("Age of the person represented by this entity");

                    b.Property<DateTime>("CareerStart")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time of registration within the organization");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Phone number of the person represented by this entity");

                    b.Property<int>("CurrentlyAppointedMatchesCount")
                        .HasColumnType("int")
                        .HasComment("The number of matches appointed to this entity on current round");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("First name of the person represented by this entity");

                    b.Property<string>("ImageUrl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("~/Images/Referees/referee-default-avatar.png")
                        .HasComment("Picture of the person represented by this entity");

                    b.Property<bool>("IsAvaliable")
                        .HasColumnType("bit")
                        .HasComment("Gives information if person is free to officiate matches for current round");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Last name of the person represented by this entity");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasComment("Current role of the person represented by this entity within the organization");

                    b.Property<int>("TotalMatchesOfficiated")
                        .HasColumnType("int")
                        .HasComment("Number of matches officiated");

                    b.Property<int>("TownId")
                        .HasColumnType("int")
                        .HasComment("Current town which the person represented by this entity resides");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The registered user related to this entity");

                    b.HasKey("Id");

                    b.HasIndex("TownId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Referees");

                    b.HasComment("The main entity of the application");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 19,
                            CareerStart = new DateTime(2021, 7, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contact = "0930411565",
                            CurrentlyAppointedMatchesCount = 0,
                            FirstName = "Антонио",
                            IsAvaliable = true,
                            LastName = "Иванов",
                            Role = 0,
                            TotalMatchesOfficiated = 0,
                            TownId = 1,
                            UserId = new Guid("ea01fe26-36c8-4daa-b1c8-8b9209e82478")
                        },
                        new
                        {
                            Id = 2,
                            Age = 30,
                            CareerStart = new DateTime(2016, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contact = "0996737720",
                            CurrentlyAppointedMatchesCount = 0,
                            FirstName = "Румен",
                            IsAvaliable = true,
                            LastName = "Радославов",
                            Role = 1,
                            TotalMatchesOfficiated = 0,
                            TownId = 1,
                            UserId = new Guid("1e48bbc8-cbf0-494c-89e0-6bcccc36cc6a")
                        },
                        new
                        {
                            Id = 3,
                            Age = 16,
                            CareerStart = new DateTime(2021, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contact = "0927828260",
                            CurrentlyAppointedMatchesCount = 0,
                            FirstName = "Павел",
                            IsAvaliable = true,
                            LastName = "Христов",
                            Role = 1,
                            TotalMatchesOfficiated = 0,
                            TownId = 1,
                            UserId = new Guid("065a8654-fc52-43b4-8d3d-7e90a87e2bd9")
                        },
                        new
                        {
                            Id = 4,
                            Age = 31,
                            CareerStart = new DateTime(2022, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contact = "0912157336",
                            CurrentlyAppointedMatchesCount = 0,
                            FirstName = "Румен",
                            IsAvaliable = true,
                            LastName = "Радославов",
                            Role = 2,
                            TotalMatchesOfficiated = 0,
                            TownId = 1,
                            UserId = new Guid("35e56d1c-a7c2-445d-9eb5-0cdaecb0ebb1")
                        },
                        new
                        {
                            Id = 5,
                            Age = 29,
                            CareerStart = new DateTime(2023, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Contact = "0946372655",
                            CurrentlyAppointedMatchesCount = 0,
                            FirstName = "Тодор",
                            IsAvaliable = false,
                            LastName = "Любомиров",
                            Role = 3,
                            TotalMatchesOfficiated = 0,
                            TownId = 1,
                            UserId = new Guid("d9f18631-5bdb-4b41-86f4-8d6dbe71efb6")
                        });
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.RefereeDivision", b =>
                {
                    b.Property<int>("RefereeId")
                        .HasColumnType("int")
                        .HasComment("Referee in specific division");

                    b.Property<int>("DivisionId")
                        .HasColumnType("int")
                        .HasComment("Division in which referee is allowed to offciate");

                    b.Property<int>("DivisionMatchesOfficiated")
                        .HasColumnType("int")
                        .HasComment("The count of matches referee officiated in this division");

                    b.HasKey("RefereeId", "DivisionId");

                    b.HasIndex("DivisionId");

                    b.ToTable("RefereesDivisions");

                    b.HasComment("Mapping table for Referee and Division");

                    b.HasData(
                        new
                        {
                            RefereeId = 1,
                            DivisionId = 5,
                            DivisionMatchesOfficiated = 0
                        },
                        new
                        {
                            RefereeId = 1,
                            DivisionId = 4,
                            DivisionMatchesOfficiated = 0
                        },
                        new
                        {
                            RefereeId = 2,
                            DivisionId = 5,
                            DivisionMatchesOfficiated = 0
                        },
                        new
                        {
                            RefereeId = 2,
                            DivisionId = 4,
                            DivisionMatchesOfficiated = 0
                        },
                        new
                        {
                            RefereeId = 3,
                            DivisionId = 5,
                            DivisionMatchesOfficiated = 0
                        },
                        new
                        {
                            RefereeId = 3,
                            DivisionId = 4,
                            DivisionMatchesOfficiated = 0
                        },
                        new
                        {
                            RefereeId = 4,
                            DivisionId = 5,
                            DivisionMatchesOfficiated = 0
                        },
                        new
                        {
                            RefereeId = 4,
                            DivisionId = 4,
                            DivisionMatchesOfficiated = 0
                        },
                        new
                        {
                            RefereeId = 4,
                            DivisionId = 3,
                            DivisionMatchesOfficiated = 0
                        },
                        new
                        {
                            RefereeId = 5,
                            DivisionId = 2,
                            DivisionMatchesOfficiated = 0
                        },
                        new
                        {
                            RefereeId = 5,
                            DivisionId = 1,
                            DivisionMatchesOfficiated = 0
                        });
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.RefereeSquad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key");

                    b.Property<int>("DelegateId")
                        .HasColumnType("int")
                        .HasComment("Delegate who will supervise the officials");

                    b.Property<int>("FirstAssistantRefereeId")
                        .HasColumnType("int")
                        .HasComment("First assistant of the match");

                    b.Property<int>("MainRefereeId")
                        .HasColumnType("int")
                        .HasComment("Main referee of the squad");

                    b.Property<int>("MatchId")
                        .HasColumnType("int")
                        .HasComment("Match assigned to the squad");

                    b.Property<int>("SecondAssistantRefereeId")
                        .HasColumnType("int")
                        .HasComment("Second assistant of the match");

                    b.HasKey("Id");

                    b.HasIndex("DelegateId");

                    b.HasIndex("FirstAssistantRefereeId");

                    b.HasIndex("MainRefereeId");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.HasIndex("SecondAssistantRefereeId");

                    b.ToTable("RefereesSquads");

                    b.HasComment("Every referee squad consists of 1 main ref, 2 assitants and a delegate");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5f7a5bad-da9c-4fd9-871a-483492e9bdaa"),
                            DelegateId = 4,
                            FirstAssistantRefereeId = 2,
                            MainRefereeId = 1,
                            MatchId = 1,
                            SecondAssistantRefereeId = 3
                        });
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("Short name for the season (e.g. 2004/05, 2011/12, 2022/23)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2")
                        .HasComment("End of the season");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2")
                        .HasComment("Start of the season");

                    b.HasKey("Id");

                    b.ToTable("Seasons");

                    b.HasComment("Season is the timespan in which all matches between teams are played");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "2022/23",
                            End = new DateTime(2023, 5, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Start = new DateTime(2022, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasComment("Abbreviation of the team");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the team");

                    b.Property<int>("TownId")
                        .HasColumnType("int")
                        .HasComment("In which town the team is located");

                    b.HasKey("Id");

                    b.HasIndex("TownId");

                    b.ToTable("Teams");

                    b.HasComment("Team that plays matches in specific division during specific season");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "БТВ",
                            Name = "Ботев",
                            TownId = 2
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "ВИХР",
                            Name = "Вихър",
                            TownId = 3
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "ГГНТ",
                            Name = "Гигант",
                            TownId = 4
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "КМОС",
                            Name = "Космос",
                            TownId = 5
                        });
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.TeamSeason", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasComment("Team that participates specific season");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int")
                        .HasComment("The specific season");

                    b.Property<int>("DivisionId")
                        .HasColumnType("int")
                        .HasComment("In which division the team plays");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int")
                        .HasComment("The manager of the team for specific season");

                    b.Property<int>("Placement")
                        .HasColumnType("int")
                        .HasComment("Placement in the division during the season");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasComment("Points earned during season");

                    b.Property<int>("ShirtColor")
                        .HasColumnType("int")
                        .HasComment("Color of the player's shirts");

                    b.HasKey("TeamId", "SeasonId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("SeasonId");

                    b.ToTable("TeamsSeasons");

                    b.HasComment("Mapping table for team and season");

                    b.HasData(
                        new
                        {
                            TeamId = 1,
                            SeasonId = 1,
                            DivisionId = 4,
                            ManagerId = 1,
                            Placement = 1,
                            Points = 0,
                            ShirtColor = 11
                        },
                        new
                        {
                            TeamId = 2,
                            SeasonId = 1,
                            DivisionId = 4,
                            ManagerId = 2,
                            Placement = 1,
                            Points = 0,
                            ShirtColor = 0
                        },
                        new
                        {
                            TeamId = 3,
                            SeasonId = 1,
                            DivisionId = 4,
                            ManagerId = 3,
                            Placement = 1,
                            Points = 0,
                            ShirtColor = 4
                        },
                        new
                        {
                            TeamId = 4,
                            SeasonId = 1,
                            DivisionId = 4,
                            ManagerId = 4,
                            Placement = 1,
                            Points = 0,
                            ShirtColor = 2
                        });
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Distance")
                        .HasColumnType("float")
                        .HasComment("Distance to town from given location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("nvarchar(26)")
                        .HasComment("Name of the town");

                    b.Property<double>("TravelCost")
                        .HasColumnType("float")
                        .HasComment("The cost of travel which is calculated from distance and gas price");

                    b.Property<int>("TravelTime")
                        .HasColumnType("int")
                        .HasComment("The time it takes to go to the town from given location");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int")
                        .HasComment("Zone in which town is located");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId");

                    b.ToTable("Towns");

                    b.HasComment("Where teams and referees are located and matches are played");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Distance = 0.0,
                            Name = "Плевен",
                            TravelCost = 0.0,
                            TravelTime = 0,
                            ZoneId = 4
                        },
                        new
                        {
                            Id = 2,
                            Distance = 0.0,
                            Name = "Трънчовица",
                            TravelCost = 0.0,
                            TravelTime = 0,
                            ZoneId = 4
                        },
                        new
                        {
                            Id = 3,
                            Distance = 0.0,
                            Name = "Гулянци",
                            TravelCost = 0.0,
                            TravelTime = 0,
                            ZoneId = 4
                        },
                        new
                        {
                            Id = 4,
                            Distance = 0.0,
                            Name = "Белене",
                            TravelCost = 0.0,
                            TravelTime = 0,
                            ZoneId = 4
                        },
                        new
                        {
                            Id = 5,
                            Distance = 0.0,
                            Name = "Гривица",
                            TravelCost = 0.0,
                            TravelTime = 0,
                            ZoneId = 4
                        });
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Name of the zone");

                    b.HasKey("Id");

                    b.ToTable("Zones");

                    b.HasComment("Zone that is part of region in the country");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Плевен Изток"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Плевен Запад"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Плевен Център"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Плевенска Област"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Application", b =>
                {
                    b.HasOne("FootballRefereeManagementSystem.Data.Models.ApplicationUser", "User")
                        .WithOne("Application")
                        .HasForeignKey("FootballRefereeManagementSystem.Data.Models.Application", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Article", b =>
                {
                    b.HasOne("FootballRefereeManagementSystem.Data.Models.ApplicationUser", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Match", b =>
                {
                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Division", "Division")
                        .WithMany("Matches")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Town", "Town")
                        .WithMany("Matches")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.TeamSeason", "AwayTeam")
                        .WithMany("AwayGames")
                        .HasForeignKey("AwayTeamId", "SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.TeamSeason", "HomeTeam")
                        .WithMany("HomeGames")
                        .HasForeignKey("HomeTeamId", "SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("Division");

                    b.Navigation("HomeTeam");

                    b.Navigation("Town");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Message", b =>
                {
                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Referee", "Author")
                        .WithMany("Messages")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.RefereeSquad", "RefereeSquad")
                        .WithMany("Messages")
                        .HasForeignKey("RefereeSquadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("RefereeSquad");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.PlayerTeamSeason", b =>
                {
                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Player", "Player")
                        .WithMany("PlayerTeamsSeasons")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.TeamSeason", "TeamSeason")
                        .WithMany("TeamSeasonPlayers")
                        .HasForeignKey("TeamId", "SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("TeamSeason");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Referee", b =>
                {
                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Town", "Town")
                        .WithMany("Referees")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.ApplicationUser", "User")
                        .WithOne("Referee")
                        .HasForeignKey("FootballRefereeManagementSystem.Data.Models.Referee", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Town");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.RefereeDivision", b =>
                {
                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Division", "Division")
                        .WithMany("DivisionReferees")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Referee", "Referee")
                        .WithMany("RefereeDivisions")
                        .HasForeignKey("RefereeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Division");

                    b.Navigation("Referee");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.RefereeSquad", b =>
                {
                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Referee", "Delegate")
                        .WithMany("DelegateRefereeSquads")
                        .HasForeignKey("DelegateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Referee", "FirstAssistantReferee")
                        .WithMany("FirstAssistantRefereeSquads")
                        .HasForeignKey("FirstAssistantRefereeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Referee", "MainReferee")
                        .WithMany("MainRefereeSquads")
                        .HasForeignKey("MainRefereeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Match", "Match")
                        .WithOne("RefereeSquad")
                        .HasForeignKey("FootballRefereeManagementSystem.Data.Models.RefereeSquad", "MatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Referee", "SecondAssistantReferee")
                        .WithMany("SecondAssistantRefereeSquads")
                        .HasForeignKey("SecondAssistantRefereeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Delegate");

                    b.Navigation("FirstAssistantReferee");

                    b.Navigation("MainReferee");

                    b.Navigation("Match");

                    b.Navigation("SecondAssistantReferee");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Team", b =>
                {
                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Town", "Town")
                        .WithMany("Teams")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Town");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.TeamSeason", b =>
                {
                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Division", "Division")
                        .WithMany("TeamsSeasons")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Manager", "Manager")
                        .WithMany("TeamsSeasons")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Season", "Season")
                        .WithMany("SeasonTeams")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Team", "Team")
                        .WithMany("TeamSeasons")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Division");

                    b.Navigation("Manager");

                    b.Navigation("Season");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Town", b =>
                {
                    b.HasOne("FootballRefereeManagementSystem.Data.Models.Zone", "Zone")
                        .WithMany("Towns")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("FootballRefereeManagementSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("FootballRefereeManagementSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballRefereeManagementSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("FootballRefereeManagementSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Application");

                    b.Navigation("Articles");

                    b.Navigation("Referee");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Division", b =>
                {
                    b.Navigation("DivisionReferees");

                    b.Navigation("Matches");

                    b.Navigation("TeamsSeasons");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Manager", b =>
                {
                    b.Navigation("TeamsSeasons");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Match", b =>
                {
                    b.Navigation("RefereeSquad");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Player", b =>
                {
                    b.Navigation("PlayerTeamsSeasons");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Referee", b =>
                {
                    b.Navigation("DelegateRefereeSquads");

                    b.Navigation("FirstAssistantRefereeSquads");

                    b.Navigation("MainRefereeSquads");

                    b.Navigation("Messages");

                    b.Navigation("RefereeDivisions");

                    b.Navigation("SecondAssistantRefereeSquads");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.RefereeSquad", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Season", b =>
                {
                    b.Navigation("SeasonTeams");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Team", b =>
                {
                    b.Navigation("TeamSeasons");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.TeamSeason", b =>
                {
                    b.Navigation("AwayGames");

                    b.Navigation("HomeGames");

                    b.Navigation("TeamSeasonPlayers");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Town", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Referees");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("FootballRefereeManagementSystem.Data.Models.Zone", b =>
                {
                    b.Navigation("Towns");
                });
#pragma warning restore 612, 618
        }
    }
}
